package main

import (
	"bufio"
	"fmt"
	"net"
	"os"
	"sync"
)

const (
	port = ":"
)

var (
	clientsMap = make(map[net.Conn]struct{})
	mutex      sync.Mutex
)

func main() {
	listener, err := net.Listen("tcp", port)
	defer listener.Close()

	fmt.Println("Server listening on port", port)

	go func() {
		scanner := bufio.NewScanner(os.Stdin)
		for scanner.Scan() {
			message := scanner.Text()
			sendMessageToAllClients(message)
		}
	}()

	for {
		conn, err := listener.Accept()

		fmt.Println("Client connected:", conn.RemoteAddr())

		mutex.Lock()
		clientsMap[conn] = struct{}{}
		mutex.Unlock()

		hostname, err := os.Hostname()

		message := hostname
		_, err = fmt.Fprintf(conn, "%s\n", message)

		fmt.Println("Message sent to client:", message)

		go handleClient(conn)
	}
}

func handleClient(conn net.Conn) {
	defer conn.Close()

	scanner := bufio.NewScanner(conn)
	for scanner.Scan() {
		message := scanner.Text()
		fmt.Println("Message received from client:", message)
	}

	mutex.Lock()
	delete(clientsMap, conn)
	mutex.Unlock()
}

func sendMessageToAllClients(message string) {
	mutex.Lock()
	defer mutex.Unlock()

	for conn := range clientsMap {
		_, err := fmt.Fprintf(conn, "%s\n", message)
		if err != nil {
			fmt.Println(err)
		} else {
			fmt.Println("Message sent to client:", conn.RemoteAddr(), message)
		}
	}
}
